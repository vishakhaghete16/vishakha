%{
#include "y.tab.h" // make sure this matches your Bison-generated header
#include <math.h>
#include <string.h>
%}

%option noyywrap
%option yylineno

%%

[uU][a-zA-Z_]*          { yylval.var = strdup(yytext); return VARIABLE; }
[0-9]+(\.[0-9]+)?       { yylval.num = atof(yytext); return NUMBER; }
"sin"                   { return SIN; }
"cos"                   { return COS; }
"+"                     { return PLUS; }
"-"                     { return MINUS; }
"*"                     { return TIMES; }
"/"                     { return DIVIDE; }
"("                     { return LPAREN; }
")"                     { return RPAREN; }
"="                     { return EQUALS; }
";"                     { return SEMICOLON; }
[ \t]+                  ; // Ignore whitespace
.                       { return yytext[0]; } // Handle other characters

%%











%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>        // Include for math functions
#include "y.tab.h"   // Ensure this is the header generated by Flex

void yyerror(const char *s);
int yylex(void);
extern int yylineno;    // External declaration if using %option yylineno in Flex

double vars[256];       // Simple variable storage based on ASCII index
%}

%union {
    double num;         // For numerical values
    char* var;          // For variable names
}

%token <var> VARIABLE
%token <num> NUMBER
%token SIN COS
%token PLUS MINUS TIMES DIVIDE
%token LPAREN RPAREN
%token EQUALS SEMICOLON

%type <num> expression term factor
%type <var> assignment

%%
input:
      | input line
      ;

line:
      assignment SEMICOLON { printf("%s = %f\n", $1, vars[$1[0]]); }
    | error SEMICOLON      { yyerror("syntax error"); }
    ;

assignment:
      VARIABLE EQUALS expression { vars[$1[0]] = $3; $$ = $1; }
    ;

expression:
      expression PLUS term   { $$ = $1 + $3; }
    | expression MINUS term  { $$ = $1 - $3; }
    | term                   { $$ = $1; }
    ;

term:
      term TIMES factor      { $$ = $1 * $3; }
    | term DIVIDE factor     { $$ = $1 / $3; }
    | factor                 { $$ = $1; }
    ;

factor:
      NUMBER                 { $$ = $1; }
    | VARIABLE               { $$ = vars[$1[0]]; }
    | LPAREN expression RPAREN { $$ = $2; }
    | SIN LPAREN expression RPAREN { $$ = sin($3); }
    | COS LPAREN expression RPAREN { $$ = cos($3); }
    ;

%%
void yyerror(const char *s) {
    fprintf(stderr, "Error near line %d: %s\n", yylineno, s);
}

int main(void) {
    printf("Enter expressions (e.g., 'u = sin(12) + cos(12);'):\n");
    yyparse();
    return 0;
}



//gedit trigno.
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ gedit trigno.l
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ gedit trigno.y
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ yacc -d trigno.y
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ gcc lex.yy.c y.tab.c -lm
ques.l: In function ‘yylex’:
ques.l:10:9: error: ‘YYSTYPE’ has no member named ‘ival’
   10 | [0-9]+      { yylval.ival = atoi(yytext); return NUMBER; }
      |         ^
ques.l:11:9: error: ‘YYSTYPE’ has no member named ‘sval’
   11 | \"[^\"]*\"  { yylval.sval = strdup(yytext); return STRING; }
      |         ^
ques.l:11:40: error: ‘STRING’ undeclared (first use in this function)
   11 | \"[^\"]*\"  { yylval.sval = strdup(yytext); return STRING; }
      |                                        ^~~~~~
ques.l:11:40: note: each undeclared identifier is reported only once for each function it appears in
ques.l:12:10: error: ‘SQRT’ undeclared (first use in this function)
   12 | "sqrt"      { return SQRT; }
      |          ^~~~
ques.l:13:10: error: ‘STRLEN’ undeclared (first use in this function)
   13 | "strlen"    { return STRLEN; }
      |          ^~~~~~
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ lex trigno.l
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ gcc lex.yy.c y.tab.c -lm
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ ./a.out

