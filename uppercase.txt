//lex file
%{
#include "y.tab.h"
%}

%%

[a-z]   { yylval.c = yytext[0] - 32; return LETTER; }
[A-Z]   { yylval.c = yytext[0] + 32; return LETTER; }
\n      { return NEWLINE; }
.       { return yytext[0]; }

%%

int yywrap() {
    return 1;
}











// upper.y
%{
#include <stdio.h>
#include "y.tab.h" // Include the parser header file for token definitions

void yyerror(const char *);

int yylex();

%}

%union {
    char c;
}

%token <c> LETTER
%token NEWLINE

%%

input: /* empty */
      | input line
      ;

line: letters NEWLINE    { printf("\n"); }
    ;

letters: LETTER         { printf("%c", $1); }
       | letters LETTER { printf("%c", $2); }
       ;

%%

int main() {
    yyparse();
    return 0;
}

void yyerror(const char *s) {
    printf("%s\n", s);
}
















vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ flex lexer.l
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ yacc -d upper.y
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ gcc lex.yy.c y.tab.c -o upper -ll
vishakha@vishakha-VirtualBox:~/vishakha/LPCCassignment$ ./upper
PUNE
pune
Pne
pNE

